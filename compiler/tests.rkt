#lang racket
(require test-engine/racket-tests)
(require racket/syntax)
(require "compiler.rkt"
         "functions.rkt"
         "arithmetic-expressions.rkt"
         "boolean-expressions.rkt"
         "statements.rkt")

(define (label-generator x)
  (format-symbol "_~a" x))

;; error handling

(check-error (compile-simpl '((fun (f x x) 
                                (vars [(y 0)]
                                      (return y)))))
             "duplicate")

(check-error (compile-simpl '((fun (f x)
                                (vars [(y 0) (y 5)]
                                      (return y)))))
             "duplicate")

(check-error (compile-simpl '((fun (f x)
                                (vars [(y 0)]
                                      (set y (+ y x))))))
             "return")

(check-error (compile-simpl '((fun (f x y)
                                (vars []
                                      (return (f (- x 1)))))))
             "arguments")

;; arithmetic expressions

(check-expect (compile-aexp '(+ 1 3) label-generator)
              '((move (0 SP) 1)
                (add SP SP 1)                              
                (move (0 SP) 3)                                
                (add SP SP 1)                                
                (add (-2 SP) (-2 SP) (-1 SP))                                
                (sub SP SP 1)))

(check-expect (compile-aexp '(+ (* 5 3) (- (div 4 2) x)) label-generator)
              '((move (0 SP) 5)
                (add SP SP 1)
                (move (0 SP) 3)
                (add SP SP 1)
                (mul (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)
                (move (0 SP) 4)
                (add SP SP 1)
                (move (0 SP) 2)
                (add SP SP 1)
                (div (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)
                (move (0 SP) (_x FP))
                (add SP SP 1)
                (sub (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)
                (add (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)))

;; boolean expressions

(check-expect (compile-bexp '(> (* 5 3) (- (div 4 2) x)) label-generator)
              '((move (0 SP) 5) 
                (add SP SP 1)
                (move (0 SP) 3)
                (add SP SP 1)
                (mul (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)
                (move (0 SP) 4)
                (add SP SP 1)
                (move (0 SP) 2)
                (add SP SP 1)
                (div (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)
                (move (0 SP) (_x FP))
                (add SP SP 1)
                (sub (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)
                (gt (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)))

(check-expect (compile-bexp '(and (<= 1 3) false) label-generator)
              '((move (0 SP) 1) 
                (add SP SP 1)
                (move (0 SP) 3)
                (add SP SP 1)
                (le (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)
                (move (0 SP) #f)
                (add SP SP 1)
                (land (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)))

;; statements

(check-expect (compile-stmt '(print (+ x 3)) label-generator)
              '((move (0 SP) (_x FP)) 
                (add SP SP 1)
                (move (0 SP) 3)
                (add SP SP 1)
                (add (-2 SP) (-2 SP) (-1 SP))
                (sub SP SP 1)
                (print-val (-1 SP))
                (sub SP SP 1)))

;; programs

(check-expect (compile-simpl '((fun (f x) 
                                 (vars [] 
                                       (return (+ 1 x))))))
              '((halt) 
                (label FN_f) 
                (const FN_f_x -1) 
                (const FN_f_FP 0) 
                (const FN_f_RETURN-ADDR 1) 
                (const FN_f_SIZE 2) 
                (move (FN_f_FP SP) FP) 
                (move (FN_f_RETURN-ADDR SP) RETURN-ADDR) 
                (move FP SP) 
                (add SP SP FN_f_SIZE) 
                (move (0 SP) 1) 
                (add SP SP 1) 
                (move (0 SP) (FN_f_x FP)) 
                (add SP SP 1) 
                (add (-2 SP) (-2 SP) (-1 SP)) 
                (sub SP SP 1) 
                (move RETURN-VAL (-1 SP)) 
                (sub SP SP 1) 
                (sub SP SP FN_f_SIZE) 
                (move FP (FN_f_FP SP)) 
                (move RETURN-ADDR (FN_f_RETURN-ADDR SP)) 
                (jump RETURN-ADDR) 
                (data RETURN-VAL 0) 
                (data RETURN-ADDR END) 
                (data FP 0) 
                (data SP END) 
                (label END)))

(check-expect (compile-simpl '((fun (main) 
                                 (vars [(x 0) (y 5)] 
                                       (print x) 
                                       (print "\n") 
                                       (return 0)))))
              '((jump FN_main) 
                (label FN_main) 
                (const FN_main_FP 0) 
                (const FN_main_RETURN-ADDR 1) 
                (const FN_main_x 2) 
                (const FN_main_y 3) 
                (const FN_main_SIZE 4) 
                (move (FN_main_FP SP) FP) 
                (move (FN_main_RETURN-ADDR SP) RETURN-ADDR) 
                (move (FN_main_x SP) 0) 
                (move (FN_main_y SP) 5) 
                (move FP SP) 
                (add SP SP FN_main_SIZE) 
                (move (0 SP) (FN_main_x FP)) 
                (add SP SP 1) 
                (print-val (-1 SP)) 
                (sub SP SP 1) 
                (print-string "\n") 
                (move (0 SP) 0) 
                (add SP SP 1) 
                (move RETURN-VAL (-1 SP)) 
                (sub SP SP 1) 
                (sub SP SP FN_main_SIZE) 
                (move FP (FN_main_FP SP)) 
                (move RETURN-ADDR (FN_main_RETURN-ADDR SP)) 
                (jump RETURN-ADDR) 
                (data RETURN-VAL 0) 
                (data RETURN-ADDR END) 
                (data FP 0) 
                (data SP END) 
                (label END)))

(check-expect (compile-simpl '((fun (main)
                                 (vars [(x 0) (y 5)]
                                       (while (> y 0) 
                                              (print (* x y)) 
                                              (set x (+ x 2)) 
                                              (set y (- y 1)))
                                       (return 0)))))
              '((jump FN_main) 
                (label FN_main) 
                (const FN_main_FP 0) 
                (const FN_main_RETURN-ADDR 1) 
                (const FN_main_x 2)
                (const FN_main_y 3) 
                (const FN_main_SIZE 4) 
                (move (FN_main_FP SP) FP) 
                (move (FN_main_RETURN-ADDR SP) RETURN-ADDR) 
                (move (FN_main_x SP) 0) 
                (move (FN_main_y SP) 5) 
                (move FP SP) 
                (add SP SP FN_main_SIZE) 
                (label LABEL1) 
                (move (0 SP) (FN_main_y FP)) 
                (add SP SP 1) 
                (move (0 SP) 0) 
                (add SP SP 1) 
                (gt (-2 SP) (-2 SP) (-1 SP)) 
                (sub SP SP 1) 
                (sub SP SP 1) 
                (branch (0 SP) LABEL2) 
                (jump LABEL3) 
                (label LABEL2) 
                (move (0 SP) (FN_main_x FP)) 
                (add SP SP 1) 
                (move (0 SP) (FN_main_y FP)) 
                (add SP SP 1) 
                (mul (-2 SP) (-2 SP) (-1 SP)) 
                (sub SP SP 1) 
                (print-val (-1 SP)) 
                (sub SP SP 1) 
                (move (0 SP) (FN_main_x FP)) 
                (add SP SP 1) 
                (move (0 SP) 2) 
                (add SP SP 1) 
                (add (-2 SP) (-2 SP) (-1 SP)) 
                (sub SP SP 1) 
                (move (FN_main_x FP) (-1 SP)) 
                (sub SP SP 1) 
                (move (0 SP) (FN_main_y FP)) 
                (add SP SP 1) 
                (move (0 SP) 1) 
                (add SP SP 1) 
                (sub (-2 SP) (-2 SP) (-1 SP)) 
                (sub SP SP 1) 
                (move (FN_main_y FP) (-1 SP)) 
                (sub SP SP 1) 
                (jump LABEL1) 
                (label LABEL3) 
                (move (0 SP) 0) 
                (add SP SP 1) 
                (move RETURN-VAL (-1 SP)) 
                (sub SP SP 1) 
                (sub SP SP FN_main_SIZE) 
                (move FP (FN_main_FP SP)) 
                (move RETURN-ADDR (FN_main_RETURN-ADDR SP)) 
                (jump RETURN-ADDR) 
                (data RETURN-VAL 0) 
                (data RETURN-ADDR END) 
                (data FP 0) 
                (data SP END) 
                (label END)))

(test)
